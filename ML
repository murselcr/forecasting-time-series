import pandas as pd
from matplotlib import pyplot as plt
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.preprocessing import MinMaxScaler
import math
import tensorflow as tf

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

dataset = pd.read_excel('eskişehir hava durumu.xlsx', usecols=[1] )
dataset["ET"] = [float(str(i).replace(",", ".")) for i in dataset["ET"]]
plt.plot(dataset)
plt.show() 
dataset= dataset.values
dataset= dataset.astype('float32')
scaler = MinMaxScaler()
dataset =  scaler.fit_transform(dataset)
train_size = int(len(dataset) * 0.7)

train_data, test_data = dataset[0:train_size,:], dataset[train_size:len(dataset),:]
print("Eğitim veri seti boyutu:", len(train_data))
print("Test veri seti boyutu:", len(test_data))

def create_dataset(dataset, look_back=1):
    dataX, dataY = [], []
    for i in range(len(dataset)-look_back-1):
        a = dataset[i:(i+look_back), 0]
        dataX.append(a)
        dataY.append(dataset[i + look_back, 0])
    return np.array(dataX), np.array(dataY)
look_back=1

trainX, trainY = create_dataset(train_data, look_back)
testX, testY = create_dataset(test_data, look_back)
print(len(trainX), len(trainY))
print(len(testX), len(testY))

testY = scaler.inverse_transform(testY.reshape(-1, 1))
trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))

model = Sequential()
model.add(LSTM(4, input_shape=(1, look_back)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(trainX, trainY, epochs=100, batch_size=1, verbose=2)

trainPredict = model.predict(trainX)
testPredict = model.predict(testX)
prediction_lstm = scaler.inverse_transform(testPredict .reshape(-1, 1))
print("mae_lstm:", mean_absolute_error(testY, prediction_lstm))
print("mse_lstm:", mean_squared_error(testY, prediction_lstm))
print("mape_lstm:", mean_absolute_percentage_error(testY,  prediction_lstm))

plt.plot(testY)
plt.plot(prediction_lstm, color='red')
plt.show()

